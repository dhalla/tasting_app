# -*- coding: utf-8 -*-

from django.forms import ModelForm, Textarea, TextInput, Select
from django.db import models
from django import forms
from django.core.files.images import get_image_dimensions
from time import strftime
from manager import LocationManager, PublicLocationManager
from mipa.settings import SV_ADDR, LOCATION_IMG


def get_image_path(instance, filename):
    """ Rename Image according to location slug """
    ext = filename.split(".")[-1]
    return 'location/%s.%s' % (instance.slug, ext)


class Teaser(models.Model):

    # name = models.CharField(max_length=100, unique=True)
    headline = models.CharField("Überschrift", max_length=150)
    text = models.TextField(blank=True, null=True)
    active = models.BooleanField("Aktiv", default=False)
    link = models.CharField("Button-URL", blank=True, null=True, max_length=150)
    link_caption = models.CharField("Button-Beschriftung", max_length=100, blank=True, null=True)
    order_count = models.PositiveSmallIntegerField("Position", blank=True, null=True)

    SNIPPET = (
        ("bookmarks", u"Bookmarks"),
        ("", u"Stampede"),
        ("", u"Zufallstipp"),
    )
    snippet = models.CharField(
        max_length=50,
        help_text='Alternatives Snippet anstelle eines Freitextes einfügen',
        verbose_name="Snippet",
        choices=SNIPPET,
        blank=True, null=True
    )

    created = models.DateTimeField(auto_now_add=True, editable=False)
    modified = models.DateTimeField(auto_now=True, editable=False)

    class Meta:
        verbose_name_plural = "Teaser"
        verbose_name = "Teaser"
        ordering = ["created"]

    def __unicode__(self):
        return self.headline


class Category(models.Model):

    name = models.CharField(max_length=100, unique=True)
    slug = models.SlugField(max_length=100)
    description = models.CharField("Kommentar", blank=True, max_length=250)

    class Meta:
        verbose_name_plural = "kategorien"
        verbose_name = "kategorie"

    def __unicode__(self):
        return self.name


class Location(models.Model):

    name = models.CharField(max_length=100, unique=True)
    image = models.ImageField("Bild", upload_to=get_image_path, null=True, blank=True,
                              help_text=u"(Bild-Upload, jpg/png, \
                                Breite mind. " + LOCATION_IMG['min_width'] + "px, \
                                Hoehe mind. " + LOCATION_IMG['min_height'] + "px)")
    comment = models.TextField("Kommentar", blank=True, max_length=250)
    slug = models.SlugField(max_length=100, unique=True)
    address = models.TextField("Adresse", blank=True, null=True)
    phone = models.CharField("Telefon", max_length=255, blank=True, null=True)
    web = models.URLField("Website", max_length=255, blank=True, null=True)
    mail = models.EmailField("E-Mail", max_length=255, blank=True, null=True)
    openhours = models.CharField("Öffnungszeiten", max_length=255, blank=True, null=True)

    takeaway = models.BooleanField(
        help_text=u"Essen nur zum mitnehmen, keine Sitzplätze",
        verbose_name='take away only',
    )
    delivery = models.BooleanField(
        verbose_name='lieferservice',
        help_text=u'Restaurant liefert zu S&V',
    )

    PRICE_RANGES = (
        ("5", u"bis 5 EUR"),
        ("10", u"5-10 EUR"),
        ("15", u"15 EUR"),
        ("20", u"20 EUR"),
        ("0", u"Up to you"),
    )
    price_range = models.CharField(
        max_length=2,
        verbose_name="Preisklasse",
        choices=PRICE_RANGES,
        blank=True, null=True
    )

    public = models.BooleanField(default=True)
    created = models.DateTimeField(auto_now_add=True, editable=False)
    modified = models.DateTimeField(auto_now=True, editable=False)

    category = models.ForeignKey(
        Category, null=True, on_delete=models.SET_NULL,
        verbose_name="Kategorie",
    )

    def __unicode__(self):
        return self.name

    @models.permalink
    def get_absolute_url(self):
        return ('location_detail', [int(self.id), str(self.slug)])

    def save(self):
        # self.slug = slugify(self.name)
        super(Location, self).save()

    """ Alternative Managers """
    publicLocations = PublicLocationManager()  # Default Manager
    objects = LocationManager()  # Last Manager

    class Meta:
        ordering = ["name"]
